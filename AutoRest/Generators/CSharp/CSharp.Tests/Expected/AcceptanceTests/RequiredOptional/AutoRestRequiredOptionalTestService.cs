// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Fixtures.AcceptanceTestsRequiredOptional
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.Net;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using System.Text;
    using System.Text.RegularExpressions;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using Models;

    /// <summary>
    /// Test Infrastructure for AutoRest
    /// </summary>
    public partial class AutoRestRequiredOptionalTestService : ServiceClient<AutoRestRequiredOptionalTestService>, IAutoRestRequiredOptionalTestService
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        public Uri BaseUri { get; set; }

        /// <summary>
        /// Gets JSON serialization settings.
        /// </summary>
        public JsonSerializerSettings SerializationSettings { get; private set; }

        /// <summary>
        /// Gets JSON deserialization settings.
        /// </summary>
        public JsonSerializerSettings DeserializationSettings { get; private set; }

        /// <summary>
        /// number of items to skip
        /// </summary>
        public string RequiredGlobalPath { get; set; }

        /// <summary>
        /// number of items to skip
        /// </summary>
        public string RequiredGlobalQuery { get; set; }

        /// <summary>
        /// number of items to skip
        /// </summary>
        public int? OptionalGlobalQuery { get; set; }

        /// <summary>
        /// Gets the IImplicitModel.
        /// </summary>
        public virtual IImplicitModel ImplicitModel { get; private set; }

        /// <summary>
        /// Gets the IExplicitModel.
        /// </summary>
        public virtual IExplicitModel ExplicitModel { get; private set; }

        /// <summary>
        /// Initializes a new instance of the AutoRestRequiredOptionalTestService class.
        /// </summary>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the HTTP client pipeline.
        /// </param>
        public AutoRestRequiredOptionalTestService(params DelegatingHandler[] handlers) : base(handlers)
        {
            this.Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the AutoRestRequiredOptionalTestService class.
        /// </summary>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle HTTP transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the HTTP client pipeline.
        /// </param>
        public AutoRestRequiredOptionalTestService(HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : base(rootHandler, handlers)
        {
            this.Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the AutoRestRequiredOptionalTestService class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the HTTP client pipeline.
        /// </param>
        public AutoRestRequiredOptionalTestService(Uri baseUri, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            this.BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the AutoRestRequiredOptionalTestService class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle HTTP transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the HTTP client pipeline.
        /// </param>
        public AutoRestRequiredOptionalTestService(Uri baseUri, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            this.BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the AutoRestRequiredOptionalTestService class.
        /// </summary>
        /// <param name='requiredGlobalPath'>
        /// Required. number of items to skip
        /// </param>
        /// <param name='requiredGlobalQuery'>
        /// Required. number of items to skip
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the HTTP client pipeline.
        /// </param>
        public AutoRestRequiredOptionalTestService(string requiredGlobalPath, string requiredGlobalQuery, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (requiredGlobalPath == null)
            {
                throw new ArgumentNullException("requiredGlobalPath");
            }
            if (requiredGlobalQuery == null)
            {
                throw new ArgumentNullException("requiredGlobalQuery");
            }
            this.RequiredGlobalPath = requiredGlobalPath;
            this.RequiredGlobalQuery = requiredGlobalQuery;
        }

        /// <summary>
        /// Initializes a new instance of the AutoRestRequiredOptionalTestService class.
        /// </summary>
        /// <param name='requiredGlobalPath'>
        /// Required. number of items to skip
        /// </param>
        /// <param name='requiredGlobalQuery'>
        /// Required. number of items to skip
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle HTTP transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the HTTP client pipeline.
        /// </param>
        public AutoRestRequiredOptionalTestService(string requiredGlobalPath, string requiredGlobalQuery, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (requiredGlobalPath == null)
            {
                throw new ArgumentNullException("requiredGlobalPath");
            }
            if (requiredGlobalQuery == null)
            {
                throw new ArgumentNullException("requiredGlobalQuery");
            }
            this.RequiredGlobalPath = requiredGlobalPath;
            this.RequiredGlobalQuery = requiredGlobalQuery;
        }

        /// <summary>
        /// Initializes a new instance of the AutoRestRequiredOptionalTestService class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='requiredGlobalPath'>
        /// Required. number of items to skip
        /// </param>
        /// <param name='requiredGlobalQuery'>
        /// Required. number of items to skip
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the HTTP client pipeline.
        /// </param>
        public AutoRestRequiredOptionalTestService(Uri baseUri, string requiredGlobalPath, string requiredGlobalQuery, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            if (requiredGlobalPath == null)
            {
                throw new ArgumentNullException("requiredGlobalPath");
            }
            if (requiredGlobalQuery == null)
            {
                throw new ArgumentNullException("requiredGlobalQuery");
            }
            this.BaseUri = baseUri;
            this.RequiredGlobalPath = requiredGlobalPath;
            this.RequiredGlobalQuery = requiredGlobalQuery;
        }

        /// <summary>
        /// Initializes a new instance of the AutoRestRequiredOptionalTestService class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='requiredGlobalPath'>
        /// Required. number of items to skip
        /// </param>
        /// <param name='requiredGlobalQuery'>
        /// Required. number of items to skip
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The HTTP client handler used to handle HTTP transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the HTTP client pipeline.
        /// </param>
        public AutoRestRequiredOptionalTestService(Uri baseUri, string requiredGlobalPath, string requiredGlobalQuery, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            if (requiredGlobalPath == null)
            {
                throw new ArgumentNullException("requiredGlobalPath");
            }
            if (requiredGlobalQuery == null)
            {
                throw new ArgumentNullException("requiredGlobalQuery");
            }
            this.BaseUri = baseUri;
            this.RequiredGlobalPath = requiredGlobalPath;
            this.RequiredGlobalQuery = requiredGlobalQuery;
        }

        /// <summary>
        /// An optional partial-method to perform custom initialization.
        ///</summary> 
        partial void CustomInitialize();
        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            this.ImplicitModel = new ImplicitModel(this);
            this.ExplicitModel = new ExplicitModel(this);
            this.BaseUri = new Uri("http://localhost");
            SerializationSettings = new JsonSerializerSettings
            {
                Formatting = Formatting.Indented,
                DateFormatHandling = DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = DateTimeZoneHandling.Utc,
                NullValueHandling = NullValueHandling.Ignore,
                ReferenceLoopHandling = ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            DeserializationSettings = new JsonSerializerSettings
            {
                DateFormatHandling = DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = DateTimeZoneHandling.Utc,
                NullValueHandling = NullValueHandling.Ignore,
                ReferenceLoopHandling = ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            CustomInitialize();
        }    
    }
}
